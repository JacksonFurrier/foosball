set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

function(addPrefixes listVar prefix out)
  set(ret)
  foreach(i ${listVar})
    list(APPEND ret ${prefix}${i})
  endforeach()
  set(${out} ${ret} PARENT_SCOPE)
endfunction()

function(get_libraries out target)
  get_target_property(libs ${TARGET} LINK_LIBRARIES)
  #get_target_property(libs ${TARGET} INTERFACE_LINK_LIBRARIES)
  set(ret)
  foreach(lib ${libs})
    if(TARGET ${lib})
      get_target_property(path ${lib} LOCATION)
      list(APPEND ret " ${path}")
    else()
      list(APPEND ret " -l${lib}")
    endif()
  endforeach()
  set(${out} ${ret} PARENT_SCOPE)
endfunction()

function(toFastbuildArray listVar out)
  list(GET listVar 0 elem)
  set(ret "{\"${elem}\"")
  list(LENGTH listVar size)
  math(EXPR size "${size}-1")
  if(${size} GREATER 0)
    foreach(i RANGE 1 ${size})
      LIST(GET listVar ${i} elem)
      message(${elem})
      set(ret "${ret}, \"${elem}\"")
    endforeach()
  endif()
  set(ret "${ret}}")
  set(${out} ${ret} PARENT_SCOPE)
endfunction()

function(DBG VAR)
  message("${VAR}: ${${VAR}}")
endfunction()

macro(get_gcc_compile_flags target flags)
  #string(TOUPPER "CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}" name)
  string(TOUPPER "CMAKE_CXX_FLAGS_$<CONFIG>" name)
  set(flags "${${name}} ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_COMPILER_ARG1}")
  get_target_property(value ${target} COMPILE_FLAGS)
  if (value)
    list(APPEND flags ${value})
  endif()
  get_target_property(value ${target} COMPILE_DEFINITIONS)
  if (value)
    foreach(item ${value})
      list(APPEND flags "-D${item}")
    endforeach()
  endif()
  get_directory_property(value COMPILE_DEFINITIONS)
  if (value)
    list(APPEND flags ${value})
  endif()
  get_directory_property(value INCLUDE_DIRECTORIES)
  if (value)
    foreach(item ${value})
      list(APPEND flags "-I${item}")
    endforeach()
  endif()
  get_target_property(value ${target} INCLUDE_DIRECTORIES)
  if (value)
    foreach(item ${value})
      list(APPEND flags "-I${item}")
    endforeach()
  endif()
  get_target_property(value ${target} COMPILE_OPTIONS)
  if (value)
    foreach(item ${value})
      list(APPEND flags "${item}")
    endforeach()
  endif()
  get_target_property(value ${target} CMAKE_CXX_STANDARD)
  if (value AND CMAKE_COMPILER_IS_GNUCC)
    list(APPEND flags "-std=c++${item}")
  elseif(${CMAKE_CXX_STANDARD} AND CMAKE_COMPILER_IS_GNUCC)
    message("appending")
    list(APPEND flags "-std=c++${CMAKE_CXX_STANDARD}")
  endif()
endmacro()

function(add_source_file out SOURCE)
  get_source_file_property(HEADER_FILE_ONLY ${SOURCE} HEADER_FILE_ONLY)
  if(NOT HEADER_FILE_ONLY)
    set(srcflags "")
    get_source_file_property(LOCATION ${SOURCE} LOCATION)
    set(objectName ${LOCATION})
    string(REPLACE "/" "-" objectName "${objectName}")
    string(REPLACE "\\" "-" objectName "${objectName}")
    string(REPLACE "." "-" objectName "${objectName}")
    string(REPLACE ":" "" objectName "${objectName}")
    get_source_file_property(value ${SOURCE} COMPILE_DEFINITIONS)
    if (value)
      foreach(item ${value})
        list(APPEND srcflags "-D${item}")
      endforeach()
    endif()
    get_source_file_property(value ${SOURCE} COMPILE_FLAGS)
    if (value)
      foreach(item ${value})
        list(APPEND srcflags "${item}")
      endforeach()
    endif()
    get_source_file_property(value ${SOURCE} COMPILE_OPTIONS)
    if (value)
      foreach(item ${value})
        list(APPEND srcflags "${item}")
      endforeach()
    endif()
    get_source_file_property(value ${SOURCE} INCLUDE_DIRECTORIES)
    if (value)
      foreach(item ${value})
        list(APPEND srcflags "-I${item}")
      endforeach()
    endif()
    string(REPLACE ";" " " srcflags "${srcflags}")
    set(outputOpt "/Fo")
    if(CMAKE_COMPILER_IS_GNUCC)
      set(outputOpt "-o")
    endif()
    set(ret2 "
ObjectList( '${objectName}' ) {
  .CompilerInputFiles = {'${LOCATION}'}
  .CompilerOutputPath = '/out/' 
  .CompilerOptions + ' %1 -c ${outputOpt}\"%2\" ${srcflags}'
}")
    set(${out} "${${out}}${ret2}" PARENT_SCOPE)
  endif()
endfunction()

function(add_fastbuild_target out TARGET)
  get_target_property(TYPE ${TARGET} TYPE)
  #DBG(TYPE)
  get_target_property(IMPORTED_LINK_INTERFACE_LIBRARIES ${TARGET} IMPORTED_LINK_INTERFACE_LIBRARIES)
  DBG(IMPORTED_LINK_INTERFACE_LIBRARIES)
  get_target_property(LINK_FLAGS ${TARGET} LINK_FLAGS)
  #DBG(LINK_FLAGS)
  get_target_property(LIBRARY_OUTPUT_DIRECTORY ${TARGET} LIBRARY_OUTPUT_DIRECTORY )
  #DBG(LIBRARY_OUTPUT_DIRECTORY)
  get_target_property(NAME ${TARGET} NAME )
  #DBG(NAME)
  get_target_property(SOURCES ${TARGET} SOURCES)
  #DBG(SOURCES)
  get_gcc_compile_flags(${TARGET} flags)
  #DBG(flags)
  if(TYPE STREQUAL "SHARED_LIBRARY")
    list(APPEND flags "-shared")
  endif()
  get_libraries(IncludeLibs target)
  #DBG(IncludeLibs)
  string(REPLACE ";" " " IncludeLibs "${IncludeLibs}")
  string(REPLACE ";" " " flags "${flags}")
  set(ret "\n.CompilerOptions = '${flags}'\n")
  set(libraries "")
  foreach(i ${SOURCES})
    add_source_file(ret ${i})
    get_source_file_property(srcLOCATION ${i} LOCATION)
    string(REPLACE "/" "-" srcLOCATION "${srcLOCATION}")
    string(REPLACE "\\" "-" srcLOCATION "${srcLOCATION}")
    string(REPLACE "." "-" srcLOCATION "${srcLOCATION}")
    string(REPLACE ":" "" srcLOCATION "${srcLOCATION}")
    list(APPEND libraries "${srcLOCATION}")
  endforeach()
  toFastbuildArray("${libraries}" libraries)
  if(TYPE STREQUAL "EXECUTABLE" OR TYPE STREQUAL "SHARED_LIBRARY")
  set(outputOpt "/OUT:")
  if(CMAKE_COMPILER_IS_GNUCC)
    set(outputOpt "-o")
  endif()
  set(ret "${ret} 
Executable( '${NAME}' ) {
  .Libraries = ${libraries} 
  .LinkerOutput = '$<TARGET_FILE:${TARGET}>'
  .LinkerOptions = '%1' 
  + ' ${outputOpt} \"%2\"' 
  + '${IncludeLibs}'
}
"
  )
  endif()
  set(${out} "${${out}}${ret}" PARENT_SCOPE)
endfunction()

function(init_fastbuild out)
  set(linker ${CMAKE_LINKER})
  if(CMAKE_COMPILER_IS_GNUCC)
    set(linker ${CMAKE_CXX_COMPILER})
  endif()
  set(ret ".Compiler = '${CMAKE_CXX_COMPILER}'\n.Linker = '${linker}'\n")
  set(${out} "${ret}" PARENT_SCOPE)
endfunction()

function(alias_all_fastbuild out TARGETS)
  #DBG(TARGETS)
  set(ret)
  foreach(i ${TARGETS})
    get_target_property(NAME ${i} NAME )
    list(APPEND ret ${NAME})
  endforeach()
  #DBG(ret)
  toFastbuildArray("${ret}" ret)
  set(ret "\nAlias( 'all' ) {\n  .Targets = ${ret}\n}")
  set(${out} "${${out}}${ret}" PARENT_SCOPE)
endfunction()

function(generate_fastbuild TARGETS)
  DBG(CMAKE_CXX_STANDARD)
  set(fastbuildfile "")
  init_fastbuild(fastbuildfile)
  foreach(i ${TARGETS})
    add_fastbuild_target(fastbuildfile ${i})
  endforeach()
  alias_all_fastbuild(fastbuildfile "${TARGETS}")
  file(GENERATE OUTPUT "fbuild$<CONFIG>.bff" CONTENT ${fastbuildfile})
endfunction()
